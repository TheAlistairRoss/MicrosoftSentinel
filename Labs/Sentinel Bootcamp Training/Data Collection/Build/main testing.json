{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.24.24.22086",
      "templateHash": "17861174365526060341"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "uksouth",
      "metadata": {
        "description": "Azure Region"
      }
    },
    "basename": {
      "type": "string",
      "defaultValue": "sentinel-bootcamp",
      "minLength": 5,
      "maxLength": 40
    },
    "vnetAddressIpV4Id": {
      "type": "string",
      "defaultValue": "10.0.0.0",
      "minLength": 7,
      "maxLength": 13,
      "metadata": {
        "description": "Start of the Ip Address range for the Vnet. It must end with a .0 as this is using a /24 subnet mask (e.g. 10.0.0.0)"
      }
    },
    "deployBastion": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If true, Azure Bastion will be deployed. If false, Azure Bastion will not be deployed."
      }
    },
    "deployAMPLS": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If true, Azure Monitor Private Link Scope and Private DNS Zone will be deployed."
      }
    },
    "deployLinuxLogSource": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If true, Linux Log Source will be deployed."
      }
    },
    "deployLinuxLogForwarder": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If true, Linux Log Forwarder will be deployed."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "workshopadmin"
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminPasswordOrSSHKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "logSourceOSVersion": {
      "type": "string",
      "defaultValue": "Ubuntu-2004",
      "allowedValues": [
        "Ubuntu-1804",
        "Ubuntu-2004",
        "Ubuntu-2204"
      ],
      "metadata": {
        "description": "The version of the OS to use for the log source Virtual Machine"
      }
    },
    "logSourceVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "The size of the log source Virtual Machine"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "[deployment().properties.templateLink.uri]",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      }
    },
    "deploymentTime": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "variables": {
    "resourceGroupName": "[format('{0}-sentinel-rg', parameters('basename'))]",
    "vnetName": "[format('{0}-vnet', parameters('basename'))]",
    "logSourceSubnetName": "logSourceSubnet",
    "logForwarderSubnetName": "logForwarderSubnet",
    "privateEndpointSubnetName": "privateEndpointSubnet"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[variables('resourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Sentinel-Deployment-{0}', parameters('deploymentTime'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "basename": {
            "value": "[parameters('basename')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "2197235032349388016"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of the resources"
              }
            },
            "basename": {
              "type": "string",
              "defaultValue": "sentinel-bootcamp"
            }
          },
          "variables": {
            "workspaceName": "[format('{0}-wksp', parameters('basename'))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[variables('workspaceName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[format('SecurityInsights({0})', variables('workspaceName'))]",
              "location": "[parameters('location')]",
              "plan": {
                "name": "[format('SecurityInsights({0})', variables('workspaceName'))]",
                "promotionCode": "",
                "product": "OMSGallery/SecurityInsights",
                "publisher": "Microsoft"
              },
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              ]
            }
          ],
          "outputs": {
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Networking-Deployment-{0}', parameters('deploymentTime'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "basename": {
            "value": "[parameters('basename')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "vnetAddressIpV4Id": {
            "value": "[parameters('vnetAddressIpV4Id')]"
          },
          "logSourceSubnetName": {
            "value": "[variables('logSourceSubnetName')]"
          },
          "logForwarderSubnetName": {
            "value": "[variables('logForwarderSubnetName')]"
          },
          "privateEndpointSubnetName": {
            "value": "[variables('privateEndpointSubnetName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "13856916274274235416"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of the resources"
              }
            },
            "basename": {
              "type": "string",
              "defaultValue": "sentinel-bootcamp"
            },
            "vnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-vnet', parameters('basename'))]",
              "metadata": {
                "description": "Name for the virtual network"
              }
            },
            "vnetAddressIpV4Id": {
              "type": "string",
              "defaultValue": "10.0.0.0",
              "metadata": {
                "description": "Start of the Ip Address range for the Vnet. It must end with a .0 as this is using a /24 subnet mask (e.g. 10.0.0.0)"
              }
            },
            "logSourceSubnetName": {
              "type": "string",
              "defaultValue": "logSourceSubnet",
              "metadata": {
                "description": "Name for the Log Source Subnet"
              }
            },
            "logForwarderSubnetName": {
              "type": "string",
              "defaultValue": "logForwarderSubnet",
              "metadata": {
                "description": "Name for the Log Forwarder Subnet"
              }
            },
            "privateEndpointSubnetName": {
              "type": "string",
              "defaultValue": "privateEndpointSubnet",
              "metadata": {
                "description": "Name for the Private Endpoint Subnet"
              }
            }
          },
          "variables": {
            "vnetAddressIPv4": "[substring(parameters('vnetAddressIpV4Id'), 0, lastIndexOf(parameters('vnetAddressIpV4Id'), '.'))]",
            "vnetConfig": {
              "addressSpacePrefix": "[format('{0}.0/24', variables('vnetAddressIPv4'))]",
              "subnets": {
                "azureBastionSubnet": {
                  "name": "[parameters('logSourceSubnetName')]",
                  "addressPrefix": "[format('{0}.0/26', variables('vnetAddressIPv4'))]"
                },
                "logSourceSubnet": {
                  "name": "[parameters('logForwarderSubnetName')]",
                  "addressPrefix": "[format('{0}.64/27', variables('vnetAddressIPv4'))]"
                },
                "logForwarderSubnet": {
                  "name": "[parameters('logForwarderSubnetName')]",
                  "addressPrefix": "[format('{0}.96/27', variables('vnetAddressIPv4'))]"
                },
                "privateEndpointSubnet": {
                  "name": "[parameters('privateEndpointSubnetName')]",
                  "addressPrefix": "[format('{0}.128/27', variables('vnetAddressIPv4'))]"
                }
              }
            },
            "bastionSubnetNSGName": "[format('{0}-azurebastionsubnet-nsg', parameters('basename'))]",
            "logSourceSubnetNSGName": "[format('{0}-logsourcesubnet-nsg', parameters('basename'))]",
            "logForwarderSubnetNSGName": "[format('{0}-logforwardersubnet-nsg', parameters('basename'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-07-01",
              "name": "[variables('bastionSubnetNSGName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowHttpsInBound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "Internet",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowGatewayManagerInBound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "GatewayManager",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 110,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowLoadBalancerInBound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowBastionHostCommunicationInBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ],
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 130,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "DenyAllInBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowSshRdpOutBound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationPortRanges": [
                        "22",
                        "3389"
                      ],
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowAzureCloudCommunicationOutBound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "AzureCloud",
                      "access": "Allow",
                      "priority": 110,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowBastionHostCommunicationOutBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ],
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowGetSessionInformationOutBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Internet",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ],
                      "access": "Allow",
                      "priority": 130,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "DenyAllOutBound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 1000,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-06-01",
              "name": "[variables('logSourceSubnetNSGName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-06-01",
              "name": "[variables('logForwarderSubnetNSGName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-05-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('vnetConfig').addressSpacePrefix]"
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('vnetName'), variables('vnetConfig').subnets.azureBastionSubnet.name)]",
              "properties": {
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionSubnetNSGName'))]"
                },
                "addressPrefix": "[variables('vnetConfig').subnets.azureBastionSubnet.addressPrefix]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionSubnetNSGName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('vnetName'), variables('vnetConfig').subnets.logSourceSubnet.name)]",
              "properties": {
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('logSourceSubnetNSGName'))]"
                },
                "addressPrefix": "[variables('vnetConfig').subnets.logSourceSubnet.addressPrefix]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('logSourceSubnetNSGName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('vnetName'), variables('vnetConfig').subnets.logForwarderSubnet.name)]",
              "properties": {
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('logForwarderSubnetNSGName'))]"
                },
                "addressPrefix": "[variables('vnetConfig').subnets.logForwarderSubnet.addressPrefix]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('logForwarderSubnetNSGName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
              ]
            }
          ],
          "outputs": {
            "vNetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployBastion')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Bastion-Deployment-{1}', parameters('basename'), parameters('deploymentTime'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "basename": {
            "value": "[parameters('basename')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "bastionVnetSubnetResourceId": {
            "value": "[format('{0}/subnets/AzureBastionSubnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Networking-Deployment-{0}', parameters('deploymentTime'))), '2022-09-01').outputs.vNetId.value)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "17258583714848550778"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of the resources"
              }
            },
            "basename": {
              "type": "string",
              "defaultValue": "sentinel-bootcamp"
            },
            "bastionVnetSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the Azure Bastion Subnet"
              }
            }
          },
          "variables": {
            "bastionHostName": "[format('{0}-bastion', parameters('basename'))]",
            "publicIpAddressName": "[format('{0}-pip', variables('bastionHostName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-07-01",
              "name": "[variables('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static"
              }
            },
            {
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2022-07-01",
              "name": "[variables('bastionHostName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "IpConf",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('bastionVnetSubnetResourceId')]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Networking-Deployment-{0}', parameters('deploymentTime')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployAMPLS')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AMPLS-Deployment-{0}', parameters('deploymentTime'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "basename": {
            "value": "[parameters('basename')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Networking-Deployment-{0}', parameters('deploymentTime'))), '2022-09-01').outputs.vNetId.value]"
          },
          "privateEndpointSubnetName": {
            "value": "[variables('privateEndpointSubnetName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "7934711797660889917"
            }
          },
          "parameters": {
            "basename": {
              "type": "string",
              "defaultValue": "sentinel-bootcamp"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "virtualNetworkId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the virtual network"
              }
            },
            "privateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the subnet to use for the private endpoint"
              }
            }
          },
          "variables": {
            "amplsName": "[format('{0}-ampls', parameters('basename'))]",
            "amplsQueryAccessMode": "Enabled",
            "amplsIngestionAccessMode": "Enabled",
            "privateEndpointSubnetResourceId": "[format('{0}/subnets/{1}', parameters('virtualNetworkId'), parameters('privateEndpointSubnetName'))]",
            "privateEndpointName": "[format('{0}-ampls-privateEndpoint', parameters('basename'))]",
            "privateEndpointNICName": "[format('{0}-nic', variables('privateEndpointName'))]",
            "DNSZones": [
              "privatelink.monitor.azure.com",
              "privatelink.oms.opinsights.azure.com",
              "privatelink.ods.opinsights.azure.com",
              "privatelink.agentsvc.azure-automation.net",
              "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
            ]
          },
          "resources": [
            {
              "type": "microsoft.insights/privateLinkScopes",
              "apiVersion": "2021-07-01-preview",
              "name": "[variables('amplsName')]",
              "location": "global",
              "properties": {
                "accessModeSettings": {
                  "queryAccessMode": "[variables('amplsQueryAccessMode')]",
                  "ingestionAccessMode": "[variables('amplsIngestionAccessMode')]",
                  "exclusions": []
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[variables('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "subnet": {
                  "id": "[variables('privateEndpointSubnetResourceId')]"
                },
                "customNetworkInterfaceName": "[variables('privateEndpointNICName')]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('microsoft.insights/privateLinkScopes', variables('amplsName'))]",
                      "groupIds": [
                        "azuremonitor"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/privateLinkScopes', variables('amplsName'))]"
              ]
            },
            {
              "copy": {
                "name": "privateDNSZones",
                "count": "[length(variables('DNSZones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2018-09-01",
              "name": "[variables('DNSZones')[copyIndex()]]",
              "location": "global",
              "tags": {},
              "properties": {}
            },
            {
              "copy": {
                "name": "privatelink_virtualNetworkIds",
                "count": "[length(variables('DNSZones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[format('{0}/{1}', variables('DNSZones')[copyIndex()], uniqueString(parameters('virtualNetworkId')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', variables('privateEndpointName'), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('DNSZones'))]",
                    "input": {
                      "name": "[variables('DNSZones')[copyIndex('privateDnsZoneConfigs')]]",
                      "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('DNSZones')[copyIndex('privateDnsZoneConfigs')])]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "privateDNSZones",
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Networking-Deployment-{0}', parameters('deploymentTime')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('DataCollectionRule-Deployment-{0}', parameters('deploymentTime'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "basename": {
            "value": "[parameters('basename')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Sentinel-Deployment-{0}', parameters('deploymentTime'))), '2022-09-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "17857636865629203484"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of the resources"
              }
            },
            "workspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace Resource Id"
              }
            },
            "basename": {
              "type": "string",
              "defaultValue": "sent-adv-logging-workshop",
              "minLength": 5,
              "maxLength": 40
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2022-06-01",
              "name": "[format('{0}-syslog-dcr', parameters('basename'))]",
              "location": "[parameters('location')]",
              "kind": "Linux",
              "properties": {
                "dataSources": {
                  "syslog": [
                    {
                      "streams": [
                        "Microsoft-Syslog"
                      ],
                      "facilityNames": [
                        "user",
                        "auth",
                        "authpriv"
                      ],
                      "logLevels": [
                        "Info",
                        "Notice",
                        "Warning",
                        "Error",
                        "Critical",
                        "Alert",
                        "Emergency"
                      ],
                      "name": "sysLogsDataSource"
                    }
                  ]
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[parameters('workspaceResourceId')]",
                      "name": "DataCollectionEvent"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Microsoft-Syslog"
                    ],
                    "destinations": [
                      "DataCollectionEvent"
                    ]
                  }
                ]
              }
            }
          ],
          "outputs": {
            "syslogDcrResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}-syslog-dcr', parameters('basename')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Sentinel-Deployment-{0}', parameters('deploymentTime')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployLinuxLogSource')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Log-Source-Deployment', parameters('basename'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[parameters('basename')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "authenticationType": {
            "value": "[parameters('authenticationType')]"
          },
          "adminPasswordOrKey": {
            "value": "[parameters('adminPasswordOrSSHKey')]"
          },
          "ubuntuOSVersion": {
            "value": "[parameters('logSourceOSVersion')]"
          },
          "securityType": {
            "value": "TrustedLaunch"
          },
          "vmSize": {
            "value": "[parameters('logSourceVmSize')]"
          },
          "subnetResourceId": {
            "value": "[format('{0}/subnets/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Networking-Deployment-{0}', parameters('deploymentTime'))), '2022-09-01').outputs.vNetId.value, variables('logSourceSubnetName'))]"
          },
          "dataCollectionRuleResourceId": {
            "value": [
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('DataCollectionRule-Deployment-{0}', parameters('deploymentTime'))), '2022-09-01').outputs.syslogDcrResourceId.value]"
            ]
          },
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6744248233219916603"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location of the resources"
              }
            },
            "vmName": {
              "type": "string",
              "defaultValue": "LinuxLogSource",
              "metadata": {
                "description": "The name of your Virtual Machine."
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Username for the Virtual Machine."
              }
            },
            "authenticationType": {
              "type": "string",
              "defaultValue": "password",
              "allowedValues": [
                "sshPublicKey",
                "password"
              ],
              "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
              }
            },
            "adminPasswordOrKey": {
              "type": "securestring",
              "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
              }
            },
            "ubuntuOSVersion": {
              "type": "string",
              "defaultValue": "Ubuntu-2004",
              "allowedValues": [
                "Ubuntu-1804",
                "Ubuntu-2004",
                "Ubuntu-2204"
              ]
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2s_v3",
              "metadata": {
                "description": "The size of the VM"
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Name of the subnet in the virtual network"
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "TrustedLaunch",
              "allowedValues": [
                "Standard",
                "TrustedLaunch"
              ],
              "metadata": {
                "description": "Security Type of the Virtual Machine."
              }
            },
            "deployAMA": {
              "type": "bool",
              "defaultValue": true
            },
            "dataCollectionRuleResourceId": {
              "type": "array",
              "defaultValue": []
            },
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.uri]",
              "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
              }
            },
            "_artifactsLocationSasToken": {
              "type": "securestring",
              "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "dcrResourceAssociations",
                "count": "[length(parameters('dataCollectionRuleResourceId'))]",
                "input": {
                  "dataCollectionRuleName": "[format('{0}-dcrassociation', guid(parameters('dataCollectionRuleResourceId')[copyIndex('dcrResourceAssociations')]))]",
                  "dataCollectionRuleId": "[parameters('dataCollectionRuleResourceId')[copyIndex('dcrResourceAssociations')]]"
                }
              },
              {
                "name": "scriptFilesUris",
                "count": "[length(variables('scriptFiles'))]",
                "input": "[uri(parameters('_artifactsLocation'), format('{0}{1}', variables('scriptFiles')[copyIndex('scriptFilesUris')], parameters('_artifactsLocationSasToken')))]"
              }
            ],
            "imageReference": {
              "Ubuntu-1804": {
                "publisher": "Canonical",
                "offer": "UbuntuServer",
                "sku": "18_04-lts-gen2",
                "version": "latest"
              },
              "Ubuntu-2004": {
                "publisher": "Canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts-gen2",
                "version": "latest"
              },
              "Ubuntu-2204": {
                "publisher": "Canonical",
                "offer": "0001-com-ubuntu-server-jammy",
                "sku": "22_04-lts-gen2",
                "version": "latest"
              }
            },
            "networkInterfaceName": "[format('{0}NetInt', parameters('vmName'))]",
            "osDiskType": "Standard_LRS",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                    "keyData": "[parameters('adminPasswordOrKey')]"
                  }
                ]
              }
            },
            "securityProfileJson": {
              "uefiSettings": {
                "secureBootEnabled": true,
                "vTpmEnabled": true
              },
              "securityType": "[parameters('securityType')]"
            },
            "trustedLaunchExtension": {
              "extensionName": "GuestAttestation",
              "extensionPublisher": "Microsoft.Azure.Security.LinuxAttestation",
              "extensionVersion": "1.0",
              "maaTenantName": "GuestAttestation",
              "maaEndpoint": "[substring('emptystring', 0, 0)]"
            },
            "scriptFiles": [
              "LinuxLogSource/Config/config.sh",
              "LinuxLogSource/Config/rsyslog-50-default.conf"
            ],
            "customScriptExtension": {
              "name": "CustomScript",
              "publisher": "Microsoft.Azure.Extensions",
              "typeHandlerVersion": "2.1",
              "fileUris": "[variables('scriptFilesUris')]",
              "commandToExecute": "./config.sh"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-05-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    }
                  },
                  "imageReference": "[variables('imageReference')[parameters('ubuntuOSVersion')]]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPasswordOrKey')]",
                  "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                },
                "securityProfile": "[if(equals(parameters('securityType'), 'TrustedLaunch'), variables('securityProfileJson'), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('securityType'), 'TrustedLaunch'), and(equals(variables('securityProfileJson').uefiSettings.secureBootEnabled, true()), equals(variables('securityProfileJson').uefiSettings.vTpmEnabled, true())))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), variables('trustedLaunchExtension').extensionName)]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[variables('trustedLaunchExtension').extensionPublisher]",
                "type": "[variables('trustedLaunchExtension').extensionName]",
                "typeHandlerVersion": "[variables('trustedLaunchExtension').extensionVersion]",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "[variables('trustedLaunchExtension').maaEndpoint]",
                      "maaTenantName": "[variables('trustedLaunchExtension').maaTenantName]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "condition": "[parameters('deployAMA')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'AzureMonitorLinuxAgent')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorLinuxAgent",
                "typeHandlerVersion": "1.27",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), variables('customScriptExtension').name)]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[variables('customScriptExtension').publisher]",
                "type": "[variables('customScriptExtension').name]",
                "typeHandlerVersion": "[variables('customScriptExtension').typeHandlerVersion]",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "commandToExecute": "[variables('customScriptExtension').commandToExecute]",
                  "fileUris": "[variables('customScriptExtension').fileUris]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'AzureMonitorLinuxAgent')]"
              ]
            },
            {
              "copy": {
                "name": "dcrAssociation",
                "count": "[length(variables('dcrResourceAssociations'))]"
              },
              "type": "Microsoft.Insights/dataCollectionRuleAssociations",
              "apiVersion": "2021-04-01",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
              "name": "[variables('dcrResourceAssociations')[copyIndex()].dataCollectionRuleName]",
              "properties": {
                "dataCollectionRuleId": "[variables('dcrResourceAssociations')[copyIndex()].dataCollectionRuleId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ],
          "outputs": {
            "scriptFiles": {
              "type": "array",
              "value": "[variables('scriptFilesUris')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('DataCollectionRule-Deployment-{0}', parameters('deploymentTime')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Networking-Deployment-{0}', parameters('deploymentTime')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    }
  ]
}